package net.ipsoft.ipcenter.iprca.causality.learning.gies;

import net.ipsoft.ipcenter.iprca.causality.graph.algorithm.graphTypeChecking.DagChecker;
import net.ipsoft.ipcenter.iprca.causality.graph.algorithm.transformer.EssentialGraphGenerator;
import net.ipsoft.ipcenter.iprca.causality.graph.model.AdjImpl.ChainGraph;
import net.ipsoft.ipcenter.iprca.causality.graph.model.AdjImpl.Dag;
import net.ipsoft.ipcenter.iprca.causality.graph.model.AdjImpl.Vertex;
import net.ipsoft.ipcenter.iprca.causality.graph.model.Edge;
import net.ipsoft.ipcenter.iprca.causality.graph.model.EdgeType;
import net.ipsoft.ipcenter.iprca.causality.graph.model.Node;
import net.ipsoft.ipcenter.iprca.causality.graph.model.intervention.Intervention;
import net.ipsoft.ipcenter.iprca.causality.interventionData.DataSet;
import net.ipsoft.ipcenter.iprca.causality.interventionData.NodeProb;
import net.ipsoft.ipcenter.iprca.causality.interventionData.dataGenerator.CausalModel;
import net.ipsoft.ipcenter.iprca.causality.interventionData.dataGenerator.OneCpd;
import net.ipsoft.ipcenter.iprca.causality.scoreFunction.*;
import net.ipsoft.ipcenter.iprca.causality.utils.EmpiricalDistribution;
import org.junit.Test;
import net.ipsoft.ipcenter.iprca.causality.utils.DataSetStore;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import static org.junit.Assert.assertEquals;

/**
 * Created by sli on 12/2/15.
 */
public class LearnerLargeVariablesTest {

    @Test
    public void testAutoGeneratedObservationDataSet_2Nodes () throws Exception {

        Intervention intervention = new Intervention(Arrays.asList());

        List<Intervention> interventions = Arrays.asList(intervention);

        int noOfNodes = 2;
        List<Node> nodes = new ArrayList<>();
        for(int i = 1; i <= noOfNodes; i++){
            Node node = new Node(i);
            node.addLevel("0","1");
            nodes.add(node);
        }

        List<Edge> edges = Arrays.asList(
                new Edge(1,2, EdgeType.DIRECTED_PLUS)

        );

        Dag dag = new Dag(nodes, edges);
        CausalModel causalModel = new CausalModel(dag, new OneCpd());
        DataSet dataSet = causalModel.generateDataSet(10000, interventions);

        BicScoreFunction scoreFunction = new BicScoreFunction(dataSet);


        for(Vertex v : causalModel.getDag().getVertexes()){
            Node node = v.getNode();
            LocalComponent localComponent = new LocalComponent(node, v.getParents());
            for(NodesConfiguration parentConfig : localComponent.getNodesConfigurations()){
                NodeProb np = scoreFunction.getEmpiricalProb(node, parentConfig);
                NodeProb np_defined = causalModel.getCpd().getProb(node, parentConfig);
                assertEquals(np.getProb()[0], np_defined.getProb()[0], 0.05);
                assertEquals(np.getProb()[1], np_defined.getProb()[1], 0.05);
            }
        }
    }


    @Test
    public void testAutoGeneratedObservationDataSet_7Nodes () throws Exception {

        Intervention intervention = new Intervention(Arrays.asList());

        List<Intervention> interventions = Arrays.asList(intervention);


        CausalModel causalModel = new CausalModel(getDag(), new OneCpd());
        DataSet dataSet = causalModel.generateDataSet(700, interventions);

        BicScoreFunction scoreFunction = new BicScoreFunction(dataSet);


        for(Vertex v : causalModel.getDag().getVertexes()){
            Node node = v.getNode();
            LocalComponent localComponent = new LocalComponent(node, v.getParents());
            for(NodesConfiguration parentConfig : localComponent.getNodesConfigurations()){
                NodeProb np = scoreFunction.getEmpiricalProb(node, parentConfig);
                NodeProb np_defined = causalModel.getCpd().getProb(node, parentConfig);
                assertEquals(np.getProb()[0], np_defined.getProb()[0], 0.05);
                assertEquals(np.getProb()[1], np_defined.getProb()[1], 0.05);
            }
        }
    }

    @Test
    public void testLearner_7Variables_autogen_inv0_4000() throws Exception {

        Intervention intervention = new Intervention(Arrays.asList());

        List<Intervention> interventions = Arrays.asList(intervention);

        CausalModel causalModel = new CausalModel(getDag(), new OneCpd());
        DataSet dataSet = causalModel.generateDataSet(40000, interventions);
        ScoreFunction scoreFunction = new BicScoreFunction(dataSet);
        Learner learner = new Learner(dataSet.getColumnNodes(), scoreFunction, dataSet.getInterventionFamily());
        ChainGraph ed = learner.learnEssentialGraph();

        EssentialGraphGenerator generator = new EssentialGraphGenerator(getDag());
        ChainGraph oldEd = generator.toEssentialGraph();

        double score_exact_1 = scoreFunction.score(getDag());
        double score_exact_2 = scoreFunction.score(oldEd);

        double score_learned = scoreFunction.score(ed);

        System.out.println (oldEd.toString());
        System.out.println (ed.toString());

        assertEquals(ed.hasSameEdges(oldEd), true);
    }


    @Test
    public void testBDeu_7Variables_autogen_inv0_4000() throws Exception {

        Intervention intervention = new Intervention(Arrays.asList());

        List<Intervention> interventions = Arrays.asList(intervention);

        CausalModel causalModel = new CausalModel(getDag(), new OneCpd());
        DataSet dataSet = causalModel.generateDataSet(40000, interventions);
        ScoreFunction scoreFunction = new BDeuScoreFunction( dataSet, 1.0, 2);
        Learner learner = new Learner(dataSet.getColumnNodes(), scoreFunction, dataSet.getInterventionFamily());
        ChainGraph ed = learner.learnEssentialGraph();

        EssentialGraphGenerator generator = new EssentialGraphGenerator(getDag());
        ChainGraph oldEd = generator.toEssentialGraph();

        double score_exact_1 = scoreFunction.score(getDag());
        double score_exact_2 = scoreFunction.score(oldEd);

        double score_learned = scoreFunction.score(ed);


        System.out.println (ed.toString());

        System.out.println (oldEd.toString());

        assertEquals(ed.hasSameEdges(oldEd), true);
    }


    @Test
    public void testLearner_7Variables_autogen_inv0_4000_BIC() throws Exception {

        Intervention intervention = new Intervention(Arrays.asList());

        List<Intervention> interventions = Arrays.asList(intervention);

        Dag dag = getDag();
        CausalModel causalModel = new CausalModel(dag, new OneCpd());
        DataSet dataSet = causalModel.generateDataSet(4000, interventions);

        ScoreFunction scoreFunction = new BicScoreFunction(dataSet);

        double score_exact = scoreFunction.score(dag);
        Learner learner = new Learner(dataSet.getColumnNodes(), scoreFunction, dataSet.getInterventionFamily());
        ChainGraph ed = learner.learnEssentialGraph();

        EssentialGraphGenerator generator = new EssentialGraphGenerator(getDag());
        ChainGraph oldEd = generator.toEssentialGraph();

        double score_learned = scoreFunction.score(ed);

        assertEquals(ed.hasSameEdges(oldEd), true);
    }

    @Test
    public void testLearner_7VariablesObservation_fromFile_AllThreeStepsContributed_inv0_4000_BIC() throws Exception {


        DataSetStore store = new DataSetStore("allThreeSteps_7nodes_ds.txt");
        Dag dag = getDag();

        DataSet dataSet = store.load();

        ScoreFunction scoreFunction = new BicScoreFunction(dataSet);

        double score_exact = scoreFunction.score(dag);
        Learner learner = new Learner(dataSet.getColumnNodes(), scoreFunction, dataSet.getInterventionFamily());
        ChainGraph ed = learner.learnEssentialGraph();

        EssentialGraphGenerator generator = new EssentialGraphGenerator(getDag());
        ChainGraph oldEd = generator.toEssentialGraph();

        double score_learned = scoreFunction.score(ed);

        Learner learner2 = new Learner(ed, scoreFunction, dataSet.getInterventionFamily());
        ChainGraph ed2 = learner.learnEssentialGraph();

        double score_learned2 = scoreFunction.score(ed);


        assertEquals(ed.hasSameEdges(oldEd), true);
    }

    @Test
    public void testLearner_7Variables_autogen_inv0() throws Exception {

        Intervention intervention = new Intervention(Arrays.asList());

        List<Intervention> interventions = Arrays.asList(intervention);

        CausalModel causalModel = new CausalModel(getDag(), new OneCpd());
        DataSet dataSet = causalModel.generateDataSet(4000, interventions);

        BicScoreFunction localScore = new BicScoreFunction(dataSet);
        Learner learner = new Learner(dataSet.getColumnNodes(), localScore, dataSet.getInterventionFamily());
        ChainGraph ed = learner.learnEssentialGraph();

        EssentialGraphGenerator generator = new EssentialGraphGenerator(getDag());
        ChainGraph oldEd = generator.toEssentialGraph();

        System.out.println (ed.toString());
        assertEquals(ed.hasSameEdges(oldEd), true);
    }


    @Test
    public void testLearner_ThreeVariables_autogen_inv0_1 () throws Exception {

        Intervention intervention = new Intervention(Arrays.asList());

        Intervention intervention1 = new Intervention(Arrays.asList(new Node(1)));
        List<Intervention> interventions = Arrays.asList(intervention, intervention1);

        CausalModel causalModel = new CausalModel(getDag(), new OneCpd());
        DataSet dataSet = causalModel.generateDataSet(4000, interventions);
        BicScoreFunction localScore = new BicScoreFunction(dataSet);
        Learner learner = new Learner(dataSet.getColumnNodes(), localScore, dataSet.getInterventionFamily());
        ChainGraph ed = learner.learnEssentialGraph();
        Edge edge = ed.findEdge(dataSet.getColumnNodes().get(0), dataSet.getColumnNodes().get(1));
        assertEquals(edge.getEdgeType(), EdgeType.DIRECTED_PLUS);

    }


    @Test
    public void testLearner_ThreeVariables_autogen_inv0_2 () throws Exception {

        Intervention intervention = new Intervention(Arrays.asList());

        Intervention intervention1 = new Intervention(Arrays.asList(new Node(2)));
        List<Intervention> interventions = Arrays.asList(intervention, intervention1);

        CausalModel causalModel = new CausalModel(getDag(), new OneCpd());
        DataSet dataSet = causalModel.generateDataSet(8000, interventions);
        BicScoreFunction localScore = new BicScoreFunction(dataSet);
        Learner learner = new Learner(dataSet.getColumnNodes(), localScore, dataSet.getInterventionFamily());
        ChainGraph ed = learner.learnEssentialGraph();


    }


    @Test
    public void testLearner_DiffferenceModel_autogen_inv0_2 () throws Exception {

        Intervention intervention = new Intervention(Arrays.asList());

        List<Intervention> interventions = Arrays.asList(intervention);

        CausalModel causalModel = new CausalModel(getDiffDag(), new OneCpd());
        DataSet dataSet = causalModel.generateDataSet(8000, interventions);

        EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(dataSet, causalModel.getCpd(), causalModel.getDag());

        empiricalDistribution.checkDataSetAgainstCpd(causalModel.getDag().getNodes());

        BicScoreFunction localScore = new BicScoreFunction(dataSet);
        Learner learner = new Learner(dataSet.getColumnNodes(), localScore, dataSet.getInterventionFamily());
        ChainGraph ed = learner.learnEssentialGraph();
        dataSet.getColumnNodes().forEach(n->System.out.println(n.getDescription()));
        System.out.println(ed.getEdges().toString());

    }


    private Dag getDiffDag(){

        List<Node> totalNodes = new ArrayList<>();
        List<Node> stateChangeNodes = new ArrayList<>();
        List<Edge> edges = new ArrayList<>();
        Node node1 = new Node(1);
        Node node2 = new Node(2);
        Node node3 = new Node(3);
        Node node4 = new Node(4);

        node1.setDescription("A"+ "__" + "a");
        node2.setDescription("B"+ "__"+ "b");
        node3.setDescription("C"+ "__" + "c");
        node4.setDescription("D"+ "__" + "d");

        stateChangeNodes.addAll(Arrays.asList(new Node[]{node1, node2, node3, node4,}));


        totalNodes.addAll(stateChangeNodes);


        List<Edge> edgeList = Arrays.asList(
                new Edge(1,2, EdgeType.DIRECTED_PLUS), new Edge(1,3, EdgeType.DIRECTED_PLUS)
                ,new Edge(2,4, EdgeType.DIRECTED_PLUS)
                ,new Edge(3,4, EdgeType.DIRECTED_PLUS)
        );
        edges.addAll(edgeList);

        List<Node> stateNodes = new ArrayList<>();
        for(Node stateChangeNode : stateChangeNodes){
            Node stateNode = new Node(stateChangeNode.getNumber()+4);
            stateNode.setDescription("state" + stateChangeNode.getDescription());
            stateChangeNode.setDescription("stateChange" + stateChangeNode.getDescription());
            Edge edge = new Edge(stateNode.getNumber(), stateChangeNode.getNumber(),  EdgeType.DIRECTED_PLUS);

            stateNodes.add(stateNode);

            edges.add(edge);
        }
        totalNodes.addAll(stateNodes);

        for(int i = 0; i < totalNodes.size()/2; i++){

            totalNodes.get(i).addLevel("KK","KC","CC","CK");
        }

        for(int i = totalNodes.size()/2; i < totalNodes.size(); i++){

            totalNodes.get(i).addLevel("K","C");
        }

        totalNodes.forEach(n->System.out.println(n.getDescription()));
        System.out.println(edges.toString());

        Dag dag = new Dag(totalNodes, edges);

        return dag;
    }


    private Dag getDag(){

        int noOfNodes = 7;
        List<Node> nodes = new ArrayList<>();
        for(int i = 1; i <= noOfNodes; i++){
            Node node = new Node(i);
            node.addLevel("0","1");
            nodes.add(node);
        }

        List<Edge> edges = Arrays.asList(
                new Edge(1,2, EdgeType.DIRECTED_MINUS), new Edge(1,5, EdgeType.DIRECTED_PLUS)
                ,new Edge(2,3, EdgeType.DIRECTED_PLUS), new Edge(2,5, EdgeType.DIRECTED_PLUS), new Edge(2,6, EdgeType.DIRECTED_PLUS)
                ,new Edge(3,4, EdgeType.DIRECTED_PLUS), new Edge(3,7, EdgeType.DIRECTED_PLUS), new Edge(3,6, EdgeType.DIRECTED_PLUS)
                ,new Edge(4,7, EdgeType.DIRECTED_PLUS)
                ,new Edge(5,6, EdgeType.DIRECTED_PLUS)
        );

        Dag dag = new Dag(nodes, edges);
        DagChecker checker = new DagChecker(dag);

        assertEquals(checker.isTrue(), true);
        return  dag;
    }

}
